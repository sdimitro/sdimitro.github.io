<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Core Dump</title>
    <link>https://sdimitro.github.io/</link>
    <description>Recent content on Core Dump</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Feb 2019 00:00:00 -0700</lastBuildDate>
    
	<atom:link href="https://sdimitro.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ZFS Checkpoint Internals</title>
      <link>https://sdimitro.github.io/post/fbsd-ckpoint/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 -0700</pubDate>
      
      <guid>https://sdimitro.github.io/post/fbsd-ckpoint/</guid>
      <description>I wrote the following article for the 2018 November/December Edition of the FreeBSD Journal. If you are a FreeBSD user/developer, I highly recommend the magazine for insights in the latest developments of FreeBSD.
- Introduction - In March of this year (2018), Alexander Motin (mav@freebsd.org) ported the Pool Checkpoint feature of OpenZFS from Illumos to FreeBSD. A pool checkpoint can be thought of as a “poolwide snapshot” that captures the entire state of the pool at the time the checkpoint is created, allowing the user to revert the entire pool back to that state or discard it.</description>
    </item>
    
    <item>
      <title>ZFS Log Spacemap - The Flushing Algorithm</title>
      <link>https://sdimitro.github.io/post/zfs-lsm-flushing/</link>
      <pubDate>Wed, 05 Sep 2018 12:00:00 -0600</pubDate>
      
      <guid>https://sdimitro.github.io/post/zfs-lsm-flushing/</guid>
      <description>~ Introduction During last year&amp;rsquo;s OpenZFS Summit I presented the motivation and the internals of the Log Spacemap project - a project that Matt started a long time ago and we ended up finishing together the beginning of this year. In order to fully grasp the context of this post, I highly recommend that you watch last year&amp;rsquo;s presentation first (link). Regardless, there is still a brief overview in this post, as I believe that the subject discussed can be presented in a more abstract manner.</description>
    </item>
    
    <item>
      <title>ZFS Flamegraph Analysis Example [μ]</title>
      <link>https://sdimitro.github.io/post/seq-arc-cached-reads-micro/</link>
      <pubDate>Sat, 18 Aug 2018 12:00:00 -0600</pubDate>
      
      <guid>https://sdimitro.github.io/post/seq-arc-cached-reads-micro/</guid>
      <description>Doing sequential reads on a working set that is cached in the ARC should yield the best case performance for reads in ZFS, as disk accesses are avoided. An experiment like this can uncover CPU bottlenecks in the read codepath from the moment the read is issued to the ARC access and back. sequential_reads_arc_cached.ksh which is used to test for performance regressions does exactly that.
An interesting detail of this test is that running it on a system that just booted, gives consistently better results the first time compared to subsequent times.</description>
    </item>
    
    <item>
      <title>OpenZFS Dev Summit 2017 videos</title>
      <link>https://sdimitro.github.io/post/ozfs-summit-videos/</link>
      <pubDate>Thu, 21 Dec 2017 02:26:02 -0700</pubDate>
      
      <guid>https://sdimitro.github.io/post/ozfs-summit-videos/</guid>
      <description>All the videos for the OpenZFS summit (including the lightning talks) are now online and can be found here.
Day 1 - Faster Allocation with the Log Spacemap   Day 2 - Storage Pool Checkpoint   [BONUS] - Source Code for Storage Pool Checkpoint The original source code of the zpool checkpoint for DelphixOS is now online on Github and can be found here. As you can see the commit day is the 5th of April earlier this year, so the code has been soaking for some months now with one bug found and fixed since then.</description>
    </item>
    
    <item>
      <title>ZFS Snapshot Unmounting</title>
      <link>https://sdimitro.github.io/post/snap-unmount-perf/</link>
      <pubDate>Fri, 28 Jul 2017 12:00:00 -0600</pubDate>
      
      <guid>https://sdimitro.github.io/post/snap-unmount-perf/</guid>
      <description>Motivation Recently Alex Kleiman, a coworker from the Replication team here at Delphix, was doing some performance testing that involved deleting more than 450 thousand snapshots in ZFS. That specific part of the test was taking hours to complete and after doing some initial investigation Alex notified the ZFS team that too much time was spent in the kernel.
George Wilson jumped on the VM that the performance tests were running and was able to shed some light to the situation with the following flamegraph (interactive one can be found here):</description>
    </item>
    
    <item>
      <title>ZFS Storage Pool Checkpoint</title>
      <link>https://sdimitro.github.io/post/zpool-checkpoint/</link>
      <pubDate>Fri, 21 Apr 2017 02:26:02 -0700</pubDate>
      
      <guid>https://sdimitro.github.io/post/zpool-checkpoint/</guid>
      <description>Background During the OpenZFS summit last year (2016), Dan Kimmel and I quickly hacked together the zpool checkpoint command in ZFS, which allows reverting an entire pool to a previous state. Since it was just for a hackathon, our design was bare bones and our implementation far from complete. Around a month later, we had a new and almost complete design within Delphix and I was able to start the implementation on my own.</description>
    </item>
    
    <item>
      <title>OpenZFS Developer Summit 2016</title>
      <link>https://sdimitro.github.io/post/openzfs-2016/</link>
      <pubDate>Sun, 09 Oct 2016 12:00:00 -0600</pubDate>
      
      <guid>https://sdimitro.github.io/post/openzfs-2016/</guid>
      <description>On September 26th I had the pleasure of going to the OpenZFS Developer Summit of 2016. You can find more information on the event (slides, videos, etc..) here. The event itself was great. Many great speakers shared their experience with ZFS and how they use it in their everyday job. Brian Behlendorf, for example, presented how ZFS is used together with Lustre in supercomputers in the Livermore National Lab, and the modifications that his team had to do to ZFS in order for it to serve their use-case.</description>
    </item>
    
    <item>
      <title>Hello, Delphix!</title>
      <link>https://sdimitro.github.io/post/hello-delphix/</link>
      <pubDate>Mon, 15 Aug 2016 12:00:00 -0600</pubDate>
      
      <guid>https://sdimitro.github.io/post/hello-delphix/</guid>
      <description>This is not the standard post that comes with a problem, some motivation, an objective, and a proposed solution. This post is just an update and an opportunity for me to share some great news.
Next week I will be joining the ZFS team of Delphix in their San Francisco office. Systems programming/engineering has always been the most enjoyable area of computers for me and I believe that this is what I want to do.</description>
    </item>
    
    <item>
      <title>The journey of a ZFS read() call in 1 min [μ]</title>
      <link>https://sdimitro.github.io/post/zfs-read-dtrace-micro/</link>
      <pubDate>Thu, 11 Aug 2016 12:00:00 -0600</pubDate>
      
      <guid>https://sdimitro.github.io/post/zfs-read-dtrace-micro/</guid>
      <description>Motivation &amp;amp; Objective I&amp;rsquo;ve been reading up a lot on ZFS recently. As a part of this study, I&amp;rsquo;m planning to watch a video where Matt Ahrens goes through the read and write codepaths on ZFS. Before watching it though, I thought it would be cool if I went through the code by myself. Then, hopefully, any questions that I have while reading the code will be addressed in the video code review.</description>
    </item>
    
    <item>
      <title>How does my computer know about time zones?</title>
      <link>https://sdimitro.github.io/post/keeping-track-time/</link>
      <pubDate>Tue, 07 Jun 2016 12:00:00 -0600</pubDate>
      
      <guid>https://sdimitro.github.io/post/keeping-track-time/</guid>
      <description>&amp;ldquo;Even simple-looking things can sometimes have a surprising twist in software. And everyone who thinks that programming dates is easy to get right the first time probably hasn&amp;rsquo;t done much of it.&amp;rdquo; &amp;ndash; Peter van der Linden (Expert C Programming)
Main Problem and Motivation Recently, a colleague of mine introduced me to World Time Buddy, a convenient world clock and time zone converter used to schedule online meetings. I liked the application and I decided that I would like to develop a clone of it that would work locally with no internet connection and output the specified time zone data as plain text in the command line.</description>
    </item>
    
    <item>
      <title>Notes on Testing: Legacy code in illumos</title>
      <link>https://sdimitro.github.io/post/nuking-legacy-code/</link>
      <pubDate>Mon, 22 Dec 2014 12:00:00 -0600</pubDate>
      
      <guid>https://sdimitro.github.io/post/nuking-legacy-code/</guid>
      <description>Last Friday, Robert Mustacchi shared a great guide that new developers can reference when working with the illumos build system. As I was reading it, I came across the section on testing changes in the basic workflow chapter. In that section Mustacchi gave some general guidelines on how a developer should decide the way in which their changes should be tested.
Recently on illumos-core, I was working on an issue that had the goal of removing some legacy code and required me to delete content from many files (around 293).</description>
    </item>
    
    <item>
      <title>Scripting GDB</title>
      <link>https://sdimitro.github.io/post/scripting-gdb/</link>
      <pubDate>Sat, 01 Feb 2014 12:00:00 -0600</pubDate>
      
      <guid>https://sdimitro.github.io/post/scripting-gdb/</guid>
      <description>Motivation Two semesters ago, I was introduced to gdb in my systems programming course. Since this was the first time that I used an actual debugger, I was really impressed by the things it could do. I wanted to see what gdb was capable of, so I tried every single command on simple programs. Unfortunately, by the time I actually needed gdb in my class projects I forgot most of them.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sdimitro.github.io/slides/storage-pool-checkpoint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sdimitro.github.io/slides/storage-pool-checkpoint/</guid>
      <description>Storage Pool Checkpoint  var notesEnabled = false ;    Storage Pool Checkpoint 25 October 2017  Serapheim Dimitropoulos  Delphix     Timeline   Started with Dan Kimmel at last year&#39;s hackathon Redesigned from scratch later that year Pushed in product last spring and soaking since then   Can only be upstreamed after Device Removal. Help us get there :-)  Motivation   Motivation  Upgrading a Delphix Engine  Reboot to new OS version Run several upgrade scripts   Each upgrade script  Manipulates ZFS datasets and their properties Has a respective rollback script in case it fails    Motivation  Problems with rollback scripts  Tedious &amp;amp; time-consuming to write but most importantly, error-prone   The main problem with our rollback  Upgrade scripts manipulate datasets (not files!</description>
    </item>
    
  </channel>
</rss>